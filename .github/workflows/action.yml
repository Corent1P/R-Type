name: R-Type
run-name: R-Type
env:
    MIRROR_URL: git@github.com:EpitechPromo2027/B-CPP-500-MLH-5-1-rtype-corentin.piquet.git

on:
    push:
        branches-ignore:
            - "ga-ignore**"
    pull_request:
        branches-ignore:
            - "ga-ignore**"


jobs:
    check_program_compilation:
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker:latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Cache vcpkg
              uses: actions/cache@v3
              with:
                path: |
                  ${{github.workspace}}/vcpkg
                  ${{github.workspace}}/build
                key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
                restore-keys: |
                  ${{ runner.os }}-vcpkg-

            - name: Install vcpkg
              id: vcpkg
              run: |
                  git clone https://github.com/microsoft/vcpkg.git
                  ./vcpkg/bootstrap-vcpkg.sh
                  echo "VCPKG_ROOT=${{github.workspace}}/vcpkg/" >> $GITHUB_ENV


            - name: Install dependencies
              id: package
              run: |
                  sudo apt-get update -y && sudo apt-get install -y clang-tidy wget
                  sudo wget -qO /usr/local/bin/ninja.gz https://github.com/ninja-build/ninja/releases/latest/download/ninja-linux.zip
                  sudo gunzip /usr/local/bin/ninja.gz
                  sudo chmod a+x /usr/local/bin/ninja
                  sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev cmake build-essential
                  sudo apt-get install -y autoconf automake autoconf-archive

            - name: Compilation with CMake
              id: build
              if: steps.package.outcome == 'success'
              run: |
                  ./build.sh
                  make unit_tests

            - name: Run Unit Tests Client
              if: steps.build.outcome == 'success'
              run: |
                  ./unit_tests_client --verbose
                  gcovr --exclude tests
                  gcovr --exclude tests --branches

            - name: Run Unit Tests ECS
              if: steps.build.outcome == 'success'
              run: |
                  ./unit_tests_ecs --verbose
                  gcovr --exclude tests
                  gcovr --exclude tests --branches

            - name: Run Unit Tests Server
              if: steps.build.outcome == 'success'
              run: |
                  ./unit_tests_server --verbose
                  gcovr --exclude tests
                  gcovr --exclude tests --branches

    push_to_mirror:
        needs: [check_program_compilation]
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'push' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Push to Epitech Repository
              uses: pixta-dev/repository-mirroring-action@v1.1.1
              with:
                  target_repo_url: ${{env.MIRROR_URL}}
                  ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
