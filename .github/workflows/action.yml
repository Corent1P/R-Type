name: R-Type
run-name: R-Type
env:
    MIRROR_URL: git@github.com:EpitechPromo2027/B-CPP-500-MLH-5-1-rtype-corentin.piquet.git

on:
    push:
        branches-ignore:
            - "ga-ignore**"
    pull_request:
        branches-ignore:
            - "ga-ignore**"

jobs:
    check_program_compilation:
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker:latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Cache vcpkg
              uses: actions/cache@v3
              with:
                path: |
                  ${{github.workspace}}/vcpkg
                  ${{github.workspace}}/build
                key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json', '*/vcpkg.json') }}
                restore-keys: |
                  ${{ runner.os }}-vcpkg-

            - name: Install vcpkg
              id: vcpkg
              run: |
                  if [ ! -d "./vcpkg" ]; then
                    git clone https://github.com/microsoft/vcpkg.git
                    ./vcpkg/bootstrap-vcpkg.sh
                  fi

            - name: Install dependencies
              id: package
              run: |
                  sudo apt-get update -y && sudo apt-get install -y clang-tidy wget
                  sudo wget -qO /usr/local/bin/ninja.gz https://github.com/ninja-build/ninja/releases/latest/download/ninja-linux.zip
                  sudo gunzip /usr/local/bin/ninja.gz
                  sudo chmod a+x /usr/local/bin/ninja
                  sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev build-essential pkg-config
                  sudo apt-get install -y autoconf automake autoconf-archive libbz2-dev libdivsufsort-dev libssl-dev libmpfr-dev
                  sudo apt install -y libjsoncpp-dev ninja-build
                  sudo ln -s /usr/include/jsoncpp/json/ /usr/include/json
                  sudo apt remove -y cmake
                  sudo apt install -y cmake
                  cmake --version
                  echo "VCPKG_ROOT=${{github.workspace}}/vcpkg/" >> $GITHUB_ENV

            - name: Compilation with CMake
              id: build
              if: steps.package.outcome == 'success'
              run: |
                  ./build.sh

            - name: Build Unit Tests
              continue-on-error: true
              id: tests_build
              if: steps.build.outcome == 'success'
              run: |
                  make unit_tests

            - name: Run Unit Tests Client
              if: steps.tests_build.outcome == 'success'
              run: |
                  ./unit_tests_client --verbose
                  gcovr --exclude tests
                  gcovr --exclude tests --branches

            - name: Run Unit Tests ECS
              if: steps.tests_build.outcome == 'success'
              run: |
                  ./unit_tests_ecs --verbose
                  gcovr --exclude tests
                  gcovr --exclude tests --branches

            - name: Run Unit Tests Server
              if: steps.tests_build.outcome == 'success'
              run: |
                  ./unit_tests_server --verbose
                  gcovr --exclude tests
                  gcovr --exclude tests --branches

    create_release:
        needs: [check_program_compilation]
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up NSIS
              run: |
                sudo apt-get install -y nsis

            - name: Compress repository into zip
              run: |
                zip -r r-type.zip .
              env:
                ZIP_FILE: r-type.zip

            - name: Create NSIS installer
              run: |
                echo 'Outfile "R-Type.exe"' > r-type.nsi
                echo 'Section' >> r-type.nsi
                echo '  nsisdl::download "https://github.com/Corent1P/R-Type/archive/refs/heads/main.zip" "$EXEDIR\\repo.zip"' >> r-type.nsi
                echo '  SetOutPath "$EXEDIR\\r-type"' >> r-type.nsi
                echo '  File /oname=$EXEDIR\\r-type\\r-type.zip "$EXEDIR\\r-type.zip"' >> r-type.nsi
                echo '  ExecWait "$EXEDIR\\r-type\\build.bat"' >> r-type.nsi
                echo 'SectionEnd' >> r-type.nsi

                makensis r-type.nsi

            - name: Upload release assets
              uses: softprops/action-gh-release@v1
              with:
                files: |
                  r-type.zip
                  R-Type.exe
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    push_to_mirror:
        needs: [check_program_compilation]
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'push' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Push to Epitech Repository
              uses: pixta-dev/repository-mirroring-action@v1.1.1
              with:
                  target_repo_url: ${{env.MIRROR_URL}}
                  ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
